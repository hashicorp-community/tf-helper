#!/bin/sh

## -------------------------------------------------------------------
##
## tfh: Use the Terraform Enterprise API to perform operations in TFE
##
## -------------------------------------------------------------------
##
## Copyright (c) 2018 HashiCorp. All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------


tfh_junonia_filter () {
  readonly TFH_DEFAULT_CURLRC="$JUNONIA_CONFIGDIR/curlrc"

  readonly hostname="$1"
  readonly oauth="$2"
  readonly curlrc="${3:-"$TFH_DEFAULT_CURLRC"}"

  # Waterfall verbosity levels down
  readonly vvverbose="${4}"
  readonly vverbose="${5:-$vvverbose}"
  readonly verbose="${6:-$vverbose}"

  echov "hostname:          $hostname"
  echov "oauth:             $oauth"
  echov "curlrc:            $curlrc"
  echov "verbose:           $verbose"
  echov "vverbose:          $vverbose"
  echov "vvverbose:         $vvverbose"

  if [ -z "$hostname" ]; then
    echoerr "A hostname is required"
    return 64 # filter function error code
  fi

  JW_ADDL_PARAMS="HOSTNAME=$hostname"
  JW_CONTENT_TYPE=application/vnd.api+json

  curl_auth_src=

  # curlrc argument at the command line takes highest precedence
  if echo "$TFH_CMDLINE" | grep -qE -- '-curlrc'; then
    echodebug "explicit -curlrc"
    if [ -f "$curlrc" ]; then
      curl_auth_src=curlrc
    else
      curl_auth_src=curlrc_not_found
    fi
  fi

  # Look for an oauth token
  if [ -z "$curl_auth_src" ] &&
     [ -n "$oauth"         ] &&
     echo "$TFH_CMDLINE" | grep -qE -- '-oauth'; then
    echodebug "explicit -oauth"
    curl_auth_src=oauth
  fi

  # curlrc from any source (default included)
  if [ -z "$curl_auth_src" ] && [ -f "$curlrc" ]; then
    echodebug "curlrc from env or config file"
    curl_auth_src=curlrc
  fi

  # oauth from the config file or environment var
  if [ -z "$curl_auth_src" ] && [ -n "$oauth" ]; then
    echodebug "oauth token from env or config file"
    curl_auth_src=oauth
  fi

  if [ -z "$curl_auth_src" ]; then
    curl_auth_src=none
  fi

  if [ -z "$oauth" ]; then
    oauth_status="empty"
  else
    oauth_status="not empty"
  fi

  case $curl_auth_src in
    curlrc)
      echov "oauth:     $oauth_status, unused"
      echov "curlrc:    $curlrc"
      JW_CURLRC="$curlrc"
      ;;
    oauth)
      echov "oauth:     $oauth_status"
      echov "curlrc:    $curlrc, unused"
      JW_OAUTH="$oauth"
      ;;
    curlrc_not_found)
      echov "oauth:     $oauth_status, unused"
      echov "curlrc:    $curlrc specified but not found"
      ;;
    none)
      echov "oauth:     $oauth_status, unused"
      echov "curlrc:    $curlrc not found"
      ;;
  esac

  junonia_auth_config

  return 6
}

# This is a compact version of junonia_bootstrap for easy copyhing into user
# scripts. For a fully commented, documented version of this script see
# https://github.com/fprimex/junonia/blob/master/junonia.sh
junonia_bootstrap () {
  JUNONIA_TARGET="$0"
  while [ -h "$JUNONIA_TARGET" ]; do
    JUNONIA_PATH=$(readlink "$JUNONIA_TARGET")
    if [ "$(echo "$JUNONIA_PATH" | cut -c -1)" = "/" ]; then
    JUNONIA_TARGET="$JUNONIA_PATH"
    else
    JUNONIA_TARGET="$(dirname $JUNONIA_TARGET)"
    JUNONIA_TARGET="$JUNONIA_TARGET/$JUNONIA_PATH"
    fi
  done
  JUNONIA_PATH="$(cd "$(dirname "$JUNONIA_TARGET")" && pwd -P)"
  JUNONIA_TARGET="$JUNONIA_PATH/$(basename $JUNONIA_TARGET)"
  if [ "$(basename "$JUNONIA_PATH")" = bin ]; then
    JUNONIA_PATH="$(dirname "$JUNONIA_PATH")"
  fi
}

# Top level invocation of the command.
tfh () {
  $0 help
  exit 1
}

tfh_version () {
  echo "3.0.0dev"
}

##
## Program begins here
##

# JUNONIA_DEBUG      # Turn on debugging of the junonia library
# JUNONIA_CONFIG     # Path to script rc file
# JUNONIA_CONFIGDIR  # Path to config directory
# JUNONIA_CACHEDIR   # Path to cache directory
# JUNONIA_CACHE      # Flag to optionally disable (0) caching
# JUNONIA_WRAP       # Width of two column output (option help listings)
# JUNONIA_COL1       # Width of column one
# JUNONIA_COL2       # Width of column two
# TMPDIR             # Temporary directory

# Save the whole command line
readonly TFH_CMDLINE="$0 $*"

if [ -n "$TFH_DEBUG" ]; then
  # Debugging. Print command errors and make them verbose
  tar_verbose=v
  curl_silent=
  export JUNONIA_DEBUG=1
  export TFH_vvverbose=1
  exec 3>&2
else
  # Not debugging. Shut everyting up.
  tar_verbose=
  curl_silent="-s"
  exec 3>/dev/null
fi

junonia_bootstrap

JUNONIA_WRAP=150
JUNONIA_COL1=50
JUNONIA_COL2=100

. "$JUNONIA_PATH"/lib/tfh/junonia

echodebug "$PWD"
echodebug "$0 $*"

junonia_run "$@"
